import type { GetServerSideProps, NextPage } from "next";
import { getServerAuthSession } from "@server/auth";

import { Dashboard } from "@components/shared/dashboard/Dashboard";
import Head from "next/head";
import { useState } from "react";
import { useForm } from "react-hook-form";
import {
  InvitationSchemaCreate,
  InvitationSchemaCreateInputs,
} from "@schema/member.schema";
import { zodResolver } from "@hookform/resolvers/zod";
import { ErrorAlert } from "@components/shared/Alerts";
import NotificationSuccess from "@components/shared/Notifications";
import { inputStyle, selectStyle } from "src/styles/formStyles";
import { ErrorMessage } from "@hookform/error-message";
import { api } from "@utils/api";
import { useSession } from "next-auth/react";
import { Button } from "@components/shared/Button";
import { match } from "ts-pattern";

const InviteMemberForm: NextPage = () => {
  const { data: sessionData } = useSession();
  const { data: portalData } = api.portal.getPortalBySysAdminId.useQuery(
    { sysAdminId: sessionData?.user.id },
    { enabled: !!sessionData?.user?.id }
  );
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [userInvited, setUserInvited] = useState("");
  const {
    handleSubmit,
    register,
    reset,
    formState: { errors },
  } = useForm<InvitationSchemaCreateInputs>({
    resolver: zodResolver(InvitationSchemaCreate),
  });

  const inviteMember = api.member.inviteMember.useMutation({
    onSuccess: () => {
      setShowSuccess(true);
      reset();
      setTimeout(() => setShowSuccess(false), 5000);
    },
    onError: (error) => setErrorMessage(error.message),
  });

  return (
    <>
      <Head>
        <title>T3-Dataportal - Create Org</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Dashboard current="members">
        <div className="max-w-xl px-4 sm:px-6 lg:px-8">
          <h1 className="text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl">
            Invite user
          </h1>
          <div className="sm:flex sm:items-center">
            <div className="sm:flex-auto">
              <p className="mt-2 text-sm text-gray-700">
                Here you can send an email invite so that people can join your
                portal and collaborate on publishing data
              </p>
            </div>
          </div>
          <div className="mt-8 flow-root">
            <form
              onSubmit={handleSubmit((data) => {
                setUserInvited(data.email);
                setShowSuccess(true);
                inviteMember.mutate(data);
              })}
            >
              <div className="grid grid-cols-1 items-start gap-2 sm:grid-cols-2">
                <div>
                  <label
                    htmlFor="name"
                    className="block w-fit text-sm font-medium text-gray-700"
                  >
                    Email
                  </label>
                  <div className="mt-1 w-full">
                    {portalData && (
                      <input
                        type="text"
                        className="aria-hidden hidden"
                        defaultValue={portalData.id}
                        {...register("portalId")}
                      />
                    )}
                    <input
                      type="text"
                      className={inputStyle}
                      {...register("email")}
                    />
                    <ErrorMessage
                      errors={errors}
                      name="email"
                      render={({ message }) => (
                        <p className="text-justify text-xs text-red-600">
                          {message}
                        </p>
                      )}
                    />
                  </div>
                </div>
                <div>
                  <label
                    htmlFor="type"
                    className="block w-fit text-sm font-medium text-gray-700"
                  >
                    Type
                  </label>
                  <div className="mt-1 w-full">
                    <select className={selectStyle} {...register("type")}>
                      <option value="sysadmin">Sysadmin</option>
                      <option value="member">Normal member</option>
                    </select>
                    <ErrorMessage
                      errors={errors}
                      name="type"
                      render={({ message }) => (
                        <p className="text-justify text-xs text-red-600">
                          {message}
                        </p>
                      )}
                    />
                  </div>
                </div>
              </div>
              <div className="col-span-full">
                {match(inviteMember.isLoading)
                  .with(false, () => (
                    <Button
                      type="submit"
                      color="emerald"
                      className="mt-8 w-full py-4"
                    >
                      Invite member
                    </Button>
                  ))
                  .otherwise(() => (
                    <Button
                      disabled
                      color="emerald"
                      className="mt-8 w-full py-4"
                    >
                      <div className="loader mb-4 h-4 w-4 rounded-full border-4 border-t-4 border-gray-200 ease-linear"></div>
                    </Button>
                  ))}
              </div>
              {errorMessage && (
                <div className="py-4">
                  <ErrorAlert text={errorMessage} />
                </div>
              )}
            </form>
            <div
              aria-live="assertive"
              className="pointer-events-none fixed inset-0 flex items-end px-4 py-6 sm:items-start sm:p-6"
            >
              <div className="flex w-full flex-col items-center space-y-4 sm:items-end">
                <NotificationSuccess
                  show={showSuccess}
                  setShow={setShowSuccess}
                  title="User invited"
                  text={`Successfully sent an invitation to ${userInvited}`}
                />
              </div>
            </div>
          </div>
        </div>
      </Dashboard>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerAuthSession(context);

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
};

export default InviteMemberForm;
