import type { GetServerSideProps, NextPage } from "next";
import { useSession } from "next-auth/react";
import { api } from "@utils/api";
import { getServerAuthSession } from "@server/auth";

import Loading from "@components/shared/Loading";
import { Dashboard } from "@components/shared/dashboard/Dashboard";
import { useLayoutEffect, useRef, useState } from "react";
import { Resource } from "@prisma/client";
import Link from "next/link";
import Head from "next/head";

const ResourcesDashboard: NextPage<{ datasetId: string }> = ({ datasetId }) => {
  const { data: datasetData, isLoading: datasetIsLoading } =
    api.dataset.getDatasetById.useQuery({ id: datasetId });
  const checkbox = useRef<HTMLInputElement>(null);
  const [checked, setChecked] = useState(false);
  const [indeterminate, setIndeterminate] = useState(false);
  const [selectedResources, setSelectedResources] = useState<Resource[]>([]);

  const utils = api.useContext();
  const deleteDatasets = api.dataset.deleteDatasets.useMutation({
    onSuccess: async () => {
      await utils.portal.getPortalBySysAdminId.invalidate();
    },
  });

  useLayoutEffect(() => {
    if (datasetData) {
      const isIndeterminate =
        selectedResources.length > 0 &&
        selectedResources.length < datasetData.resources.length;
      setChecked(selectedResources.length === datasetData.resources.length);
      setIndeterminate(isIndeterminate);
      if (checkbox.current) checkbox.current.indeterminate = isIndeterminate;
    }
  }, [selectedResources]);

  if (!datasetData) return <Loading />;

  function toggleAll() {
    if (datasetData) {
      setSelectedResources(
        checked || indeterminate ? [] : datasetData.resources
      );
      setChecked(!checked && !indeterminate);
      setIndeterminate(false);
    }
  }
  return (
    <>
      <Head>
        <title>T3-Dataportal - {datasetData.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Dashboard current="resources">
        <div className="px-4 sm:px-6 lg:px-8">
          <h1 className="text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl">
            Resources of {datasetData.title}
          </h1>
          <div className="sm:flex sm:items-center">
            <div className="sm:flex-auto">
              <p className="mt-2 text-sm text-gray-700">
                A list of all the resources in your dataset including their
                name, and url
              </p>
            </div>
            <div className="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
              <Link
                href={`/dashboard/datasets/${datasetData.id}/resources/createresource`}
                className="block rounded-md bg-lime-600 px-3 py-1.5 text-center text-sm font-semibold leading-6 text-white shadow-sm hover:bg-lime-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-lime-600"
              >
                Add resource
              </Link>
            </div>
          </div>
          <div className="mt-8 flow-root">
            <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
              <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                <div className="relative">
                  {selectedResources.length > 0 && (
                    <div className="absolute left-14 top-0 flex h-12 items-center space-x-3 bg-white sm:left-12">
                      {!deleteDatasets.isLoading ? (
                        <button
                          type="button"
                          onClick={() => {
                            deleteDatasets.mutate({
                              ids: selectedResources.map(
                                (dataset) => dataset.id
                              ),
                            });
                          }}
                          className="inline-flex items-center rounded bg-white px-2 py-1 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 disabled:cursor-not-allowed disabled:opacity-30 disabled:hover:bg-white"
                        >
                          Delete all
                        </button>
                      ) : (
                        <div className="loader mb-4 h-4 w-4 rounded-full border-4 border-t-4 border-gray-200 ease-linear"></div>
                      )}
                    </div>
                  )}
                  <div className="ring-1 ring-gray-300 sm:mx-0 sm:rounded-lg">
                    <table className="min-w-full table-fixed divide-y divide-gray-300">
                      <thead>
                        <tr>
                          <th
                            scope="col"
                            className="relative px-7 sm:w-12 sm:px-6"
                          >
                            <input
                              type="checkbox"
                              className="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-lime-600 focus:ring-lime-600"
                              ref={checkbox}
                              checked={checked}
                              onChange={toggleAll}
                            />
                          </th>
                          <th
                            scope="col"
                            className="min-w-[12rem] py-3.5 pl-3 text-left text-sm font-semibold text-gray-900"
                          >
                            Name
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Url
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Visibility
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Last Updated
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Created at
                          </th>
                          <th
                            scope="col"
                            className="relative py-3.5 pl-3 pr-4 sm:pr-3"
                          >
                            <span className="sr-only">Edit</span>
                          </th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200 bg-white">
                        {datasetData.resources.map((resource) => (
                          <tr
                            key={resource.id}
                            className={
                              selectedResources.includes(resource)
                                ? "bg-gray-50"
                                : undefined
                            }
                          >
                            <td className="relative px-7 sm:w-12 sm:px-6">
                              {selectedResources.includes(resource) && (
                                <div className="absolute inset-y-0 left-0 w-0.5 bg-lime-600" />
                              )}
                              <input
                                type="checkbox"
                                className="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-lime-600 focus:ring-lime-600"
                                value={resource.id}
                                checked={selectedResources.includes(resource)}
                                onChange={(e) =>
                                  setSelectedResources(
                                    e.target.checked
                                      ? [...selectedResources, resource]
                                      : selectedResources.filter(
                                          (p) => p !== resource
                                        )
                                  )
                                }
                              />
                            </td>
                            <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                              {resource.name}
                            </td>
                            <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                              {resource.url}
                            </td>
                            <td className="px-3 py-4 text-sm text-gray-500">
                              {resource.private ? "Private" : "Public"}
                            </td>
                            <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                              {resource.updatedAt.toLocaleString()}
                            </td>
                            <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                              {resource.createdAt.toLocaleString()}
                            </td>
                            <td className="whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-3">
                              <Link
                                href={`/dashboard/datasets/${datasetData.id}/resources/edit/${resource.id}`}
                                className="text-lime-600 hover:text-lime-900"
                              >
                                Edit
                                <span className="sr-only">, {resource.id}</span>
                              </Link>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Dashboard>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerAuthSession(context);

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
      datasetId:
        context.params && typeof context.params.datasetId === "string"
          ? context.params.datasetId
          : "",
    },
  };
};

export default ResourcesDashboard;
