generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?
  accounts                 Account[]
  sessions                 Session[]
  portals                  Portal[]
  datasets Dataset[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

model Portal {
  id            String         @id @default(cuid())
  name          String         @unique
  title         String
  private       Boolean        @default(false)
  description   String?
  sysAdminId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  SysAdmin      User           @relation(fields: [sysAdminId], references: [id])
  organizations Organization[]
  groups Group[]
  datasets Dataset[]
}

model Organization {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  portalId    String
  name        String
  private     Boolean  @default(true)
  Portal      Portal   @relation(fields: [portalId], references: [id])
  datasets Dataset[]
}

model Group {
  id          String   @id @default(cuid())
  name        String
  title       String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  portalId    String
  Portal      Portal   @relation(fields: [portalId], references: [id])
  datasets Dataset[]
}

model Dataset {
  id           String   @id @default(cuid())
  name         String
  title        String
  description  String?
  url          String?
  authorEmail  String?
  licenseId    String?
  licenseTitle String?
  licenseUrl   String?
  private      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  portalId     String
  Portal       Portal   @relation(fields: [portalId], references: [id])
  orgId        String
  Organization Organization @relation(fields: [orgId], references: [id])
  creatorId    String
  Creator      User @relation(fields: [creatorId], references: [id])
  groups       Group[]
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}
